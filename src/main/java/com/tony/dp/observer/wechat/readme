1.订阅者接口(观察者)，该接口有一个receive方法，用于接收公众号推送通知
2.微信客户端(具体观察者)，实现receive方法
3.发布者类(目标，被观察对象)，该类维护了一个订阅者列表，实现订阅、取消订阅、通知所有订阅者等功能
4.微信公众号类(具体目标)，该类提供了publishArticles方法，用于发布推送，当文章发布完毕时调用父类的通知所有订阅者方法
这个例子没有事件对象，它是微信公众号类显示的调用通知订阅者方法

java awt DEM(Delegation Event Model委派事件模型)是基于观察者模式的
在DEM模型里面，主题（Subject）角色负责发布（publish）事件，而观察者角色向特定的主题订阅（subscribe）它所感兴趣的事件。当一个具体主题产生一个事件时，
它就会通知所有感兴趣的订阅者。
使用这种发布-订阅机制的基本设计目标，是提供一种将发布者与订阅者松散地耦合在一起的联系形式，以及一种能够动态地登记、取消向一个发布者的订阅请求的办法。
显然，实现这一构思的技巧，是设计抽象接口，并把抽象层和具体层分开。这在观察者模式里可以清楚地看到。
使用DEM的用词，发布者叫做事件源（event source），而订阅者叫做事件聆听者（event listener）。在Java里面，事件由类代表，事件的发布是通过同步地调用成员方法做到的。


Spring ApplicationContext事件机制中的观察者模式
ApplicationContext：事件源，其中的 publishEvent()方法用于触发容器事件
ApplicationEvent：事件本身，自定义事件需要继承该类，可以用来传递数据
ApplicationListener：事件监听器接口，事件的业务逻辑封装在监听器里面


